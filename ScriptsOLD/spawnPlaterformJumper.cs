using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class spawnPlaterformJumper : MonoBehaviour
{
    public GameObject Personnage;
    public GameObject platerformSprite;
    public GameObject Caisse;
    public GameObject UnderPlateform;
    public GameObject JumpPlateform;
    public AudioSource audioSource;
    private GameObject MyCaisse;
    private GameObject MyJump;
    private GameObject MyUnder;
    private GameObject MyPlat;
    private double[] section;
    private double[] cuts;
    private int m = 0;  
    private int x = -20;
    private int randPlat = 0;
    private Color color;


    void Awake()
    {
    section = new double[] 
    {
         0,10,10,20,20,30,30,40,40,50,50,60,60,70,70,80,80,90,90,100,100,110,110,120,120,130,130,140,140,150,150,160,160,170,170,180,180,190,190,200,200,210
    };
    cuts = new double[] 
{
0.47501134872437,
1.8761224746704,
3.2823581695557,
4.6849207878113,
6.0909752845764,
7.5011110305786,
8.9073696136475,
10.313605308533,
11.719863891602,
13.125827789307,
14.638412475586,
15.038413047791,
15.50036239624,
15.996734619141,
16.46555519104,
16.934150695801,
17.381246566772,
17.849977493286,
18.340476989746,
18.809116363525,
19.256416320801,
19.746711730957,
20.215578079224,
20.684104919434,
21.131269454956,
21.621654510498,
22.090454101562,
22.538414001465,
23.02795791626,
23.475078582764,
23.965578079224,
24.412675857544,
24.881427764893,
25.350158691406,
25.818866729736,
26.287687301636,
26.756416320801,
27.246757507324,
27.715534210205,
28.184286117554,
28.631269454956,
29.121677398682,
29.568593978882,
30.037483215332,
30.506303787231,
30.975078582764,
31.465442657471,
31.912607192993,
32.381271362305,
32.871700286865,
33.318820953369,
33.787528991699,
34.256301879883,
34.746643066406,
35.225009918213,
35.675010681152,
36.12548828125,
36.600135803223,
37.062992095947,
37.520587921143,
38.00634765625,
38.469253540039,
38.943832397461,
39.406734466553,
39.87548828125,
40.350158691406,
40.818912506104,
41.287574768066,
41.756370544434,
42.224987030029,
42.687957763672,
43.175010681152,
43.631404876709,
44.094215393066,
44.551837921143,
45.03759765625,
46.437595367432,
47.884536743164,
49.237594604492,
50.637596130371,
52.03759765625,
53.443176269531,
54.845443725586,
56.256847381592,
58.141609191895,
59.559661865234,
60.9807472229,
62.377666473389,
63.785942077637,
65.164443969727,
66.570297241211,
67.96875,
70.075012207031,
71.425010681152,
72.792404174805,
74.125015258789,
75.525009155273,
76.925804138184,
78.325012207031,
79.72501373291,
81.125015258789,
82.525009155273,
83.925010681152,
85.332809448242,
86.738388061523,
88.147392272949,
89.548164367676,
90.875015258789,
92.231315612793,
93.799003601074,
94.299957275391,
94.76863861084,
95.237487792969,
95.706260681152,
96.174942016602,
96.643676757812,
97.112449645996,
97.581199645996,
98.049934387207,
98.51863861084,
98.987487792969,
99.456260681152,
99.924942016602,
100.39367675781,
100.86242675781,
101.32299804688,
101.79995727539,
102.26863861084,
102.73748779297,
103.20623779297,
103.6749420166,
104.14367675781,
104.612449646,
105.29106903076,
106.65483093262,
108.04106903076,
109.44644165039,
110.85272216797,
112.258934021,
113.66523742676,
114.99281311035,
115.54106140137,
116.94641876221,
118.35272216797,
120.59481048584,
121.46746063232,
122.38018035889,
123.95677947998,
124.44637298584,
124.91516876221,
126.32147216797,
126.79013824463,
128.19644165039,
128.6651763916,
130.07141113281,
130.54013061523,
131.94635009766,
132.39460754395,
133.80079650879,
134.21159362793,
134.61245727539,
135.08117675781,
135.54988098145,
140.12870788574,
141.55351257324,
143.4554901123,
144.8519744873,
146.25546264648,
147.6478729248,
148.97500610352,
150.38357543945,
151.80618286133,
153.12501525879,
154.47500610352,
155.89485168457,
157.30657958984,
158.6586151123,
160.00135803223,
161.32501220703,
162.69219970703,
164.11639404297,
165.47500610352,
166.87838745117,
168.28611755371,
169.69186401367,
171.09689331055,
172.50143432617,
175.02688598633,
179.06768798828,
183.04833984375,
188.11791992188,
188.52207946777,
188.98748779297,
189.45625305176,
189.9249420166,
190.46160888672,
190.87208557129,
191.33120727539,
191.79992675781,
192.26864624023,
192.73748779297,
193.20623779297,
193.6749420166,
194.21159362793,
194.62208557129,
195.07301330566,
195.54997253418,
196.01866149902,
196.48748779297,
196.95625305176,
197.4249420166,
197.96160888672,
198.37208557129,
198.83120727539,
199.29992675781,
199.76864624023,
200.23748779297,
200.70620727539,
201.17489624023,
201.70193481445,
203.03465270996,
203.51860046387,
203.97927856445,
204.49085998535,
204.99291992188,
205.51953125,
206.00895690918,
207.41522216797,
207.90481567383,
208.35272216797,
208.82136535645,
209.27209472656,
209.82150268555,
210.29011535645,
210.88203430176,
211.47927856445,
212.10264587402,
213.50886535645,
214.10725402832,
215.47500610352,
216.07528686523,
217.7066192627,
218.19625854492,
218.64448547363,
218.99990844727,
219.45602416992,
219.9248046875,
220.3935546875,
220.84730529785,
221.27508544922,
221.74378967285,
222.17343139648,
222.58981323242,
222.96766662598,
223.41499328613,
223.82131958008,
224.29006958008,
225.2483215332,
225.69630432129,
226.14443969727,
226.49990844727,
226.95620727539,
227.42474365234,
228.36239624023,
228.83106994629,
229.29983520508,
229.74723815918,
230.18132019043,
230.60000610352,
231.04991149902,
231.48498535156,
231.81269836426,
232.22708129883,
232.59991455078,
233.04991149902,
233.50337219238,
233.97215270996,
234.44088745117,
234.90960693359,
235.37838745117,
235.84712219238,
236.31585693359,
236.78460693359,
237.25340270996,
237.72213745117,
238.19085693359,
238.6595916748,
239.12838745117,
239.59704589844,
240.06591796875,
240.53462219238,
241.00341796875,
241.47213745117,
241.94090270996,
242.4095916748,
242.87841796875,
243.34713745117,
243.81588745117,
244.28462219238,
244.75340270996,
245.65045166016,
247.05046081543,
248.45045471191,
249.85046386719,
251.25088500977,
252.65643310547,
254.0627746582,
255.47003173828,
256.87612915039,
258.28234863281,
259.6877746582,
261.09628295898,
262.50085449219,
263.90710449219,
265.31338500977,
266.71960449219,
268.60046386719,
270.00088500977,
271.40710449219,
272.81338500977,
274.21960449219,
275.62588500977,
277.03140258789,
278.40045166016
};
    }
    void Update()
    {
        if(Personnage.transform.position.x > x + 15)
        {
           MyPlat = (GameObject)Instantiate(platerformSprite, new Vector2(Personnage.transform.position.x + 15 , -4.49f), Quaternion.identity);
           x += 15;
        }
     /*   if(audioSource.time + 1 > section[k])
        { 
            k += 2;
            if(mob == 1)
            {
               mob = 2;
            }
            else if(mob == 0)
            {
                mob = 1;
            }
            else
            {
                mob = 0;
            }
        }
        */
        if(audioSource.time + 1 > cuts[m])
        {
            randPlat = Random.Range(0,4);
            if(randPlat >= 0 && randPlat <= 1)
            {
                if( m < cuts.Length && audioSource.time + 1.5 > cuts[m])
                {
                    MyCaisse = (GameObject)Instantiate(Caisse, new Vector2( 15 + Personnage.transform.position.x , -3.2f ), Quaternion.identity);
                    m++;
                }
            }
             if(randPlat > 1 && randPlat <= 2)
            {
                if( m < cuts.Length && audioSource.time + 1.5 > cuts[m])
                {
                    MyUnder = (GameObject)Instantiate(UnderPlateform, new Vector2( 15 + Personnage.transform.position.x , -2.1f ), Quaternion.identity);
                    m++;
                }
            }
             if(randPlat > 2 && randPlat <= 3)
            {
                if( m < cuts.Length && audioSource.time + 1.5 > cuts[m])
                {
                    MyJump = (GameObject)Instantiate(JumpPlateform, new Vector2( 15 + Personnage.transform.position.x , -5.5f ), Quaternion.identity);
                    m++;
                }
            }
        }
/*         if( l < cuts.Length && audioSource.time + 1 > cuts[l])
          {
            color = new Color(Random.Range(0F,1F), Random.Range(0, 1F), Random.Range(0, 1F));
            botScreen.GetComponent<Renderer> ().material.color = color; //Set it to Camera background
             color = new Color(Random.Range(0F,1F), Random.Range(0, 1F), Random.Range(0, 1F));
            midScreen.GetComponent<Renderer> ().material.color = color; //Set it to Camera background
             color = new Color(Random.Range(0F,1F), Random.Range(0, 1F), Random.Range(0, 1F));
            topScreen.GetComponent<Renderer> ().material.color = color; //Set it to Camera background
            l++;
          }
    }*/
    }
}
